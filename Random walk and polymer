"""
This script simulates a three-dimensional symmetric random walk of a polymer chain using the freely-jointed chain (FJC) model. 
The simulation considers two scenarios: one with a fixed force applied on the x-axis (grid) and another where the force varies freely (free).
The animation showcases how the chain's conformation evolves as the force changes, allowing for an exploration of different polymer sizes.
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation

def fjc_model_simulation_grid(num_steps, f):
    # Simulates the FJC model with a fixed force applied on the x-axis (grid)
    path = np.array([[0, 0, 0]])
    position = np.array([0, 0, 0])  # Chain positions over time 

    for _ in range(num_steps):
        coordinate_probabbility = np.random.rand()

        if 0 < coordinate_probabbility <= 1/3 + f:     # Force makes bias on choosing x-axis
            if np.random.rand() < 0.5 + f:
                step = 1  # Move to the right
            else:
                step = -1  # Move to the left
            position[0] += step

        elif 1/3 + f < coordinate_probabbility <= 2/3 + f/2:
            step = np.random.choice([-1, 1])
            position[1] += step

        elif 2/3 + f/2 < coordinate_probabbility <= 1:
            step = np.random.choice([-1, 1])
            position[2] += step

        path = np.vstack([path, position.copy()])

    return path

def fjc_model_simulation_free(num_steps, f_values):
    # Simulates the FJC model with a freely varying force
    f = 2 * f_values
    path = np.array([0.0, 0.0, 0.0])
    position = np.array([0.0, 0.0, 0.0])  # Chain positions over time 

    for _ in range(num_steps):
        x = np.random.uniform(-1, 1) + f  
        if x > 1:
            x = 1
        else:
            pass  

        max_y = (1 - x**2)**(0.5)
        y = np.random.uniform(-max_y, max_y)

        sign = np.random.choice([-1, 1])
        z = sign * (1 - x**2 - y**2)**(0.5)

        step_vector = np.array([x, y, z])
        position += step_vector
        path = np.vstack([path, position.copy()])

    return path

# Simulation parameters
num_steps = 100  # Number of random walk steps
f_values = np.linspace(0, 1, 30)  # Different values of force f

# Create a larger figure and axis
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.set_title("Three-dimensional Symmetric Random Walk")
ax.set_xlabel("X Position")
ax.set_ylabel("Y Position")
ax.set_zlabel("Z Position")

# Set the limits for each axis to zoom out
ax.set_xlim([-1, 80])  # Adjust the values as needed
ax.set_ylim([-5, 10])  # Adjust the values as needed
ax.set_zlim([-5, 10])  # Adjust the values as needed

# Initialize the line plot (empty for now)
line, = ax.plot([], [], [], marker='o', markersize=2)

# Update function for animation
def update(frame):
    f_value = f_values[frame]
    path = fjc_model_simulation_free(num_steps, f_value)
    line.set_data(path[:, 0], path[:, 1])
    line.set_3d_properties(path[:, 2])
    ax.set_title("Changing polymer size by changing force (free)")
    return line,

# Create the animation
ani = FuncAnimation(fig, update, frames=len(f_values), interval=500, blit=True)

plt.show()
